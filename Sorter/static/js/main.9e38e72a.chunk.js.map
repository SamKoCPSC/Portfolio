{"version":3,"sources":["Sorter/Sidebar/Sorting/Sorting.js","Sorter/Sidebar/Setting/Setting.js","Sorter/Sidebar/Statistics/Statistics.js","Sorter/Sidebar/Panel/Panel.js","Sorter/Sidebar/Sidebar.js","Sorter/Index/Index.js","Sorter/Modal/Modal.js","Sorter/Sorter.js","App.js","serviceWorker.js","index.js"],"names":["Sorting","handleDirectionChange","e","target","value","props","ascend","descend","handleSortChange","sortChange","className","onChange","this","defaultValue","Component","Setting","handleSpeedChange","speedChange","handleSizeChange","keyCode","sizeChange","handleDistributionChange","distributionChange","onKeyDown","Statistics","accesses","comparisons","moves","Panel","handleShuffle","shuffle","handleShuffleHelper","curr","max","setTimeout","newCurr","handleSort","sort","handleRandomize","randomize","handleModals","console","log","onClick","Sidebar","direction","size","height","width","x1","y1","x2","y2","stroke","strokeWidth","Index","style","left","data","top","backgroundColor","color","Modal","handleClose","header","display","paragraph","indexes","Sorter","x","length","i","setState","state","distribution","swap","Math","floor","random","j","rand1","ceil","rand2","randomSize","newSpeed","speed","newSize","newDis","index1","index2","data1","data2","changeColor","index","newColor","newData","changeHeight","newHeight","copyArrayValues","newArr","push","parseFloat","newSort","bubbleSort","cocktailSort","combSort","selectionSort","insertionSort","shellSort","mergeSort","quickSort","heapSort","sorted","currTime","timeOut","temp","right","t","gap","minIndex","arrayOfValues","correctPos","unshift","shift","placement","pop","aux","min","leftBound","rightBound","k","stack","h","l","randomIndex","pivot","p","maxChild","isOpen","button","about","help","info","aboutParagraph","helpParagraph","infoParagraph","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9e38e72a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Sorting.css';\r\n\r\nclass Sorting extends Component { \r\n    handleDirectionChange = (e) => {\r\n        if(e.target.value === \"Ascend\") {\r\n            this.props.ascend();\r\n        } else {\r\n            this.props.descend();\r\n        }\r\n    }\r\n\r\n    handleSortChange = (e) => {\r\n        this.props.sortChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n            <h2 className = \"SortingTitle\">Sorting</h2>\r\n            <label className = \"AlgorithmLabel\">Algorithm</label>\r\n            <select className = \"SortingSelection\" onChange = {this.handleSortChange}>\r\n                <option>Bubble Sort</option>\r\n                <option>Cocktail Sort</option>\r\n                <option>Comb Sort</option>\r\n                <option>Selection Sort</option>\r\n                <option>Insertion Sort</option>\r\n                <option>Shell Sort</option>\r\n                <option>Merge Sort</option>\r\n                <option>Quick Sort</option>\r\n                <option>Heap Sort</option>\r\n            </select>\r\n            <label className = \"DirectionLabel\">Direction</label>\r\n            <select className = \"DirectionSelection\" onChange = {this.handleDirectionChange} defaultValue = 'Ascend'>\r\n                <option>Ascend</option>\r\n                <option>Descend</option>\r\n            </select>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sorting;","import React, {Component} from 'react';\r\n\r\nimport './Setting.css';\r\n\r\nclass Setting extends Component { \r\n    handleSpeedChange = (e) => {\r\n        this.props.speedChange(e.target.value);\r\n    }\r\n\r\n    handleSizeChange = (e) => {\r\n        if(e.keyCode === 13) {\r\n            this.props.sizeChange(e.target.value);\r\n        }\r\n    }\r\n\r\n    handleDistributionChange = (e) => {\r\n        this.props.distributionChange(e.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <h2 className = \"SettingTitle\">Setting</h2> \r\n            <label className = \"SpeedLabel\">Speed</label>\r\n            <select className = \"SpeedSelection\" defaultValue = \"100%\" onChange = {this.handleSpeedChange}>\r\n                <option>10%</option>\r\n                <option>20%</option>\r\n                <option>30%</option>\r\n                <option>40%</option>\r\n                <option>50%</option>\r\n                <option>60%</option>\r\n                <option>70%</option>\r\n                <option>80%</option>\r\n                <option>90%</option>\r\n                <option>100%</option>\r\n                <option>200%</option>\r\n                <option>300%</option>\r\n                <option>400%</option>\r\n                <option>500%</option>\r\n                <option>600%</option>\r\n                <option>700%</option>\r\n                <option>800%</option>\r\n                <option>900%</option>\r\n                <option>1000%</option>\r\n            </select>\r\n            <label className = \"SizeLabel\">Size</label>\r\n            <input className = \"SizeSelection\" defaultValue = '50' onKeyDown = {this.handleSizeChange}></input>\r\n            <label className = \"DistributionLabel\">Distribution</label>\r\n            <select className = \"DistrubutionSelection\" defaultValue = \"Randomly Sorted\" onChange = {this.handleDistributionChange}>\r\n                <option>Randomly Sorted</option>\r\n                <option>Nearly Sorted</option>\r\n                <option>Partially Sorted</option>\r\n                <option>Periodically Sorted</option>\r\n                <option>Reverse Sorted</option>\r\n            </select>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Setting;","import React, {Component} from 'react';\r\n\r\nimport './Statistics.css';\r\n\r\nclass Statistics extends Component { \r\n    render() {\r\n        return (\r\n            <>\r\n            <h2 className = \"StatisticsTitle\">Statistics</h2>\r\n            <label className = \"AccessLabel\">Number of Acesses: {this.props.accesses}</label>\r\n            <label className = \"ComparisonLabel\">Number of Comparisons: {this.props.comparisons}</label>\r\n            <label className = \"MoveLabel\">Number of Moves: {this.props.moves}</label>\r\n            </>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default Statistics;","import React, {Component} from 'react';\r\n\r\nimport './Panel.css';\r\n\r\nclass Panel extends Component { \r\n    handleShuffle = () => {\r\n        this.props.shuffle();\r\n        // this.handleShuffleHelper(1, 10);\r\n    }\r\n\r\n    handleShuffleHelper = (curr, max) => {\r\n        setTimeout(() => {\r\n            this.props.shuffle();\r\n            if(curr < max) {\r\n                let newCurr = curr+1;\r\n                this.handleShuffleHelper(newCurr, max);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    handleSort = (e) => {\r\n        this.props.sort();\r\n    }\r\n\r\n    handleRandomize = (e) => {\r\n        this.props.randomize();\r\n    }\r\n\r\n    handleModals = (e) => {\r\n        console.log(\"click\")\r\n        this.props.handleModals(true, e.target.className)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <button className = \"Shuffle\" onClick = {this.handleShuffle}>Shuffle</button>\r\n                <button className = \"Sort\" onClick = {this.handleSort}>Sort</button>\r\n                <button className = \"Randomize\" onClick = {this.handleRandomize}>Randomize</button>\r\n                <button className = \"About\" onClick = {this.handleModals}>About</button>\r\n                <button className = \"Help\" onClick = {this.handleModals}>Help</button>\r\n                <button className = \"Info\" onClick = {this.handleModals}>Info</button>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Panel;","import React, {Component} from 'react';\r\nimport Sorting from './Sorting/Sorting';\r\nimport Setting from './Setting/Setting';\r\nimport Statistics from './Statistics/Statistics';\r\nimport Panel from './Panel/Panel';\r\n\r\nimport './Sidebar.css';\r\n\r\n\r\nclass Sidebar extends Component {\r\n    render() {\r\n        return(\r\n            <>\r\n            <div className = \"Sidebar\">\r\n                <h1 className = \"Title\">\r\n                    SORTING <br></br>VISUALIZER\r\n                </h1>\r\n                <Sorting direction = {this.props.direction} ascend = {this.props.ascend} descend = {this.props.descend} sortChange = {this.props.sortChange}></Sorting>\r\n                <Setting size = {this.props.size} sizeChange = {this.props.sizeChange} speedChange = {this.props.speedChange} distributionChange = {this.props.distributionChange}></Setting>\r\n                <Statistics accesses = {this.props.accesses} comparisons = {this.props.comparisons} moves = {this.props.moves}></Statistics>\r\n                <Panel shuffle = {this.props.shuffle} sort = {this.props.sort} randomize = {this.props.randomize} handleModals = {this.props.handleModals}></Panel>\r\n                <svg height=\"100%\" width=\"100%\">\r\n                <line x1=\"0%\" y1=\"15%\" x2=\"100%\" y2=\"15%\" stroke=\"rgb(22, 22, 22)\" strokeWidth = \"2\" />\r\n                <line x1=\"0%\" y1=\"32.5%\" x2=\"100%\" y2=\"32.5%\" stroke=\"rgb(22, 22, 22)\" strokeWidth = \"2\" />\r\n                <line x1=\"0%\" y1=\"53%\" x2=\"100%\" y2=\"53%\" stroke=\"rgb(22, 22, 22)\" strokeWidth = \"2\" />\r\n                <line x1=\"0%\" y1=\"75%\" x2=\"100%\" y2=\"75%\" stroke=\"rgb(22, 22, 22)\" strokeWidth = \"2\" />\r\n                Sorry, your browser does not support inline SVG.\r\n                </svg>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Sidebar;","import React, {Component} from 'react';\r\n\r\nimport './Index.css';\r\n\r\nclass Index extends Component {\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n            <div className = \"Index\" style = {{\r\n                left: this.props.data.left, \r\n                top: this.props.data.top, \r\n                width: this.props.data.width, \r\n                height: this.props.data.height,\r\n                backgroundColor: this.props.data.color,\r\n            }}></div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;\r\n\r\n","import React, {Component} from 'react';\r\n\r\nimport './Modal.css';\r\n\r\nclass Modal extends Component {\r\n\r\n    handleClose = () => {\r\n        this.props.handleModals(false, this.props.header);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n            <div className = \"page\" style = {{display: this.props.display}}>\r\n                <div className = \"content\">\r\n                    <span className = \"close\" onClick = {this.handleClose}>\r\n                        &times;\r\n                    </span>\r\n                    <h1>\r\n                        {this.props.header}\r\n                    </h1>\r\n                    <p>\r\n                        {this.props.paragraph}\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Modal;\r\n","/* eslint-disable no-loop-func */\r\nimport React, {Component} from 'react';\r\nimport Sidebar from './Sidebar/Sidebar';\r\nimport Index from './Index/Index';\r\nimport Modal from './Modal/Modal';\r\n\r\nimport './Sorter.css'\r\n\r\nlet indexes = [];\r\n\r\nclass Sorter extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        direction: 'Ascend',\r\n        sort: \"Bubble Sort\",\r\n        size: 50,\r\n        speed: 1,\r\n        distribution: \"Randomly Sorted\",\r\n        accesses: 0,\r\n        comparisons: 0,\r\n        moves: 0,\r\n        about: \"none\",\r\n        help: \"none\",\r\n        info: \"none\",\r\n      };\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n      this.ascend(this.state.size);\r\n    }\r\n\r\n    ascend = (x) => {\r\n      let size = x;\r\n      indexes.length = 0;\r\n      for(let i = 0; i < size; i++) {\r\n          indexes[i] = (<Index \r\n              data = {{\r\n                  left: `${(100/size)*i}%`, \r\n                  top: `${100-(100/size)*(i+1)}%`, \r\n                  width: `${(80/size)}%`, \r\n                  height: `${(100/size)*(i+1)}%`,\r\n                  color: `rgb(93, 182, 255)`,\r\n                  value: `${(100/size)*(i+1)}`,\r\n              }}\r\n              ></Index>)\r\n      }\r\n      this.setState({direction: \"Ascend\", accesses: 0, comparisons: 0, moves: 0});\r\n    } \r\n\r\n    descend = (x) => {\r\n      let size = x;\r\n      indexes.length = 0;\r\n      for(let i = 0; i < size; i++) {\r\n          indexes[i] = (<Index \r\n              data = {{\r\n                  left: `${(100/size)*i}%`, \r\n                  top: `${100-(100/size)*(size-i)}%`, \r\n                  width: `${(80/size)}%`, \r\n                  height: `${(100/size)*(size-i)}%`,\r\n                  color: `rgb(93, 182, 255)`,\r\n                  value: `${100-(100/size)*(size-i)}`,\r\n              }}\r\n              ></Index>)\r\n      }\r\n      this.setState({direction: \"Descend\", accesses: 0, comparisons: 0, moves: 0});\r\n  }\r\n\r\n    shuffle = () => {\r\n      if(this.state.distribution === \"Randomly Sorted\") {\r\n        for(let i = 0; i < indexes.length*3; i++) {\r\n          this.swap(Math.floor(Math.random() * Math.floor(indexes.length)), Math.floor(Math.random() * Math.floor(indexes.length)));\r\n        }\r\n      } else if(this.state.distribution === \"Nearly Sorted\") {\r\n        for(let i = 0; i < indexes.length-3; i+=4){\r\n          for(let j = 0; j < 2; j++) {\r\n            let rand1 = Math.floor(Math.random() * (Math.floor(i+3) - Math.ceil(i) + 1)) + Math.ceil(i);\r\n            let rand2 = Math.floor(Math.random() * (Math.floor(i+3) - Math.ceil(i) + 1)) + Math.ceil(i);\r\n            this.swap(rand1, rand2);\r\n          }\r\n        }\r\n      } else if(this.state.distribution === \"Partially Sorted\") {\r\n        for(let i = 0; i < indexes.length*3; i++) {\r\n          let rand1 = Math.floor(Math.random() * (Math.floor(indexes.length-1) - Math.ceil(Math.floor(indexes.length/2)) + 1)) + Math.ceil(Math.floor(indexes.length/2));\r\n          let rand2 = Math.floor(Math.random() * (Math.floor(indexes.length-1) - Math.ceil(Math.floor(indexes.length/2)) + 1)) + Math.ceil(Math.floor(indexes.length/2));\r\n          this.swap(rand1, rand2);\r\n        }\r\n      } else if(this.state.distribution === \"Periodically Sorted\") {\r\n        for(let i = 0; i < indexes.length/4; i++) {\r\n          this.swap(Math.floor(Math.random() * Math.floor(indexes.length)), Math.floor(Math.random() * Math.floor(indexes.length)));\r\n        }\r\n      } else if(this.state.distribution === \"Reverse Sorted\") {\r\n        for(let i = 0; i < Math.floor(indexes.length/2); i++) {\r\n          this.swap(i, indexes.length-1-i);\r\n        }\r\n      }\r\n      this.setState({accesses: 0, comparisons: 0, moves: 0});\r\n    }\r\n\r\n    randomize = () => {\r\n      let directions = ['Ascend', 'Descend'];\r\n      let index = Math.floor(Math.random() * (Math.floor(1) - Math.ceil(0) + 1)) + Math.ceil(0);\r\n      let randomDirection = directions[index];\r\n      if(randomDirection === \"Ascend\")\r\n        this.ascend(this.state.size);\r\n      else\r\n        this.descend(this.state.size);\r\n      let randomSize = Math.floor(Math.random() * (Math.floor(250) - Math.ceil(1) + 1)) + Math.ceil(1);\r\n      this.sizeChange(randomSize);\r\n    }\r\n\r\n    speedChange = (newSpeed) => {\r\n      if(newSpeed === \"10%\") this.setState({speed: 10});\r\n      else if(newSpeed === \"20%\") this.setState({speed: 5});\r\n      else if(newSpeed === \"30%\") this.setState({speed: 3.333});\r\n      else if(newSpeed === \"40%\") this.setState({speed: 2.5});\r\n      else if(newSpeed === \"50%\") this.setState({speed: 2});\r\n      else if(newSpeed === \"60%\") this.setState({speed: 1.666});\r\n      else if(newSpeed === \"70%\") this.setState({speed: 1.428});\r\n      else if(newSpeed === \"80%\") this.setState({speed: 1.25});\r\n      else if(newSpeed === \"90%\") this.setState({speed: 1.111});\r\n      else if(newSpeed === \"100%\") this.setState({speed: 1});\r\n      else if(newSpeed === \"200%\") this.setState({speed: 0.5});\r\n      else if(newSpeed === \"300%\") this.setState({speed: 0.3333});\r\n      else if(newSpeed === \"400%\") this.setState({speed: 0.25});\r\n      else if(newSpeed === \"500%\") this.setState({speed: 0.2});\r\n      else if(newSpeed === \"600%\") this.setState({speed: 0.1666});\r\n      else if(newSpeed === \"700%\") this.setState({speed: 0.1428});\r\n      else if(newSpeed === \"800%\") this.setState({speed: 0.125});\r\n      else if(newSpeed === \"900%\") this.setState({speed: 0.1111});\r\n      else if(newSpeed === \"1000%\") this.setState({speed: 0.1});\r\n    }\r\n\r\n    sizeChange = (newSize) => {\r\n      this.setState({size: newSize, accesses: 0, comparisons: 0, moves: 0});\r\n      if(this.state.direction === \"Ascend\") {\r\n          this.ascend(newSize);\r\n      } else {\r\n          this.descend(newSize);\r\n      }\r\n    }\r\n\r\n    distributionChange = (newDis) => {\r\n      this.setState({distribution: newDis, accesses: 0, comparisons: 0, moves: 0});\r\n      if(this.state.direction === \"Ascend\") {\r\n        this.ascend(this.state.size);\r\n      } else {\r\n        this.descend(this.state.size);\r\n      }\r\n    }\r\n\r\n    swap = (index1, index2) => {\r\n      let data1 = {\r\n          left: indexes[index1].props.data.left,\r\n          top: indexes[index2].props.data.top,\r\n          width: indexes[index1].props.data.width,\r\n          height: indexes[index2].props.data.height,\r\n          color: indexes[index2].props.data.color,\r\n          value: indexes[index2].props.data.value,\r\n      }\r\n      let data2 = {\r\n          left: indexes[index2].props.data.left,\r\n          top: indexes[index1].props.data.top,\r\n          width: indexes[index2].props.data.width,\r\n          height: indexes[index1].props.data.height,\r\n          color: indexes[index1].props.data.color,\r\n          value: indexes[index1].props.data.value,\r\n      }\r\n      indexes[index1] = <Index data = {data1}></Index>\r\n      indexes[index2] = <Index data = {data2}></Index>\r\n    }\r\n\r\n    changeColor = (index, newColor) => {\r\n      let newData = {\r\n        left: indexes[index].props.data.left,\r\n        top: indexes[index].props.data.top,\r\n        width: indexes[index].props.data.width,\r\n        height: indexes[index].props.data.height,\r\n        color: newColor,\r\n        value: indexes[index].props.data.value,\r\n      }\r\n      indexes[index] = <Index data = {newData}></Index>\r\n    }\r\n\r\n    changeHeight = (index, newHeight) => {\r\n      let newData = {\r\n        left: indexes[index].props.data.left,\r\n        top: `${100-newHeight}%`,\r\n        width: indexes[index].props.data.width,\r\n        height: `${newHeight}%`,\r\n        color: indexes[index].props.data.color,\r\n        value: newHeight,\r\n      }\r\n      indexes[index] = <Index data = {newData}></Index>\r\n    }\r\n\r\n    copyArrayValues = () => {\r\n      let newArr = [];\r\n      for(let i = 0; i < indexes.length; i++) {\r\n        newArr.push(parseFloat(indexes[i].props.data.value));\r\n      }\r\n      return newArr;\r\n    }\r\n\r\n    sortChange = (newSort) => {\r\n      this.setState({sort: newSort});\r\n    }\r\n\r\n    sort = () => {\r\n      if(this.state.sort === \"Bubble Sort\") {\r\n        this.bubbleSort();\r\n      } else if(this.state.sort === \"Cocktail Sort\") {\r\n        this.cocktailSort();\r\n      } else if(this.state.sort === \"Comb Sort\") {\r\n        this.combSort();\r\n      } else if(this.state.sort === \"Selection Sort\") {\r\n        this.selectionSort();\r\n      } else if(this.state.sort === \"Insertion Sort\") {\r\n        this.insertionSort();\r\n      } else if(this.state.sort === \"Shell Sort\") {\r\n        this.shellSort();\r\n      } else if(this.state.sort === \"Merge Sort\") {\r\n        this.mergeSort();\r\n      } else if(this.state.sort === \"Quick Sort\") {\r\n        this.quickSort();\r\n      } else if(this.state.sort === \"Heap Sort\") {\r\n        this.heapSort();\r\n      }\r\n    }\r\n\r\n    sorted = (currTime) => {\r\n      // console.log(\"called\");\r\n      let timeOut = 0;\r\n      for(let i = 0; i < indexes.length; i++) {\r\n        setTimeout((index) => {\r\n          this.changeColor(index, `rgb(30, 255, 0)`) ;\r\n          this.setState({});\r\n        }, (700/this.state.size)*timeOut+currTime, i);\r\n        timeOut++;\r\n      }\r\n      for(let i = 0; i < indexes.length; i++) {\r\n        setTimeout((index) => {\r\n          this.changeColor(index, `rgb(93, 182, 255)`) ;\r\n          this.setState({});\r\n        }, (700/this.state.size)*timeOut+currTime, i);\r\n        timeOut++;\r\n      }\r\n    }\r\n\r\n    bubbleSort = () => {\r\n      let timeOut = 0;\r\n      for(let i = 0; i < indexes.length; i++) {\r\n        let swaps = false;\r\n        for(let j = 0; j < indexes.length - i - 1; j++) {\r\n          // eslint-disable-next-line no-loop-func\r\n          setTimeout(() => {\r\n            setTimeout(() => {\r\n              this.changeColor(j, `rgb(255, 57, 57)`);\r\n              this.changeColor(j+1, `rgb(255, 57, 57)`);\r\n              this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 2});\r\n            }, 40*this.state.speed)\r\n            setTimeout(() => {\r\n              if(parseFloat(indexes[j].props.data.value) > parseFloat(indexes[j+1].props.data.value)) {\r\n                swaps = true;\r\n                this.swap(j, j+1);\r\n                this.setState({moves: this.state.moves + 2});\r\n              }\r\n            }, 80*this.state.speed)\r\n            setTimeout(() => {\r\n              this.changeColor(j, `rgb(93, 182, 255)`);\r\n              this.changeColor(j+1, `rgb(93, 182, 255)`);\r\n              this.setState({});\r\n              if(i === indexes.length - 1 && j ===  indexes.length - 2) this.sorted();\r\n            }, 120*this.state.speed)\r\n          }, 120*timeOut*this.state.speed);\r\n          timeOut++;\r\n        }\r\n      }\r\n      this.sorted(120*timeOut*this.state.speed+120);\r\n    }\r\n\r\n    cocktailSort  = () => {\r\n      let timeOut = 0;\r\n      let temp = this.copyArrayValues();\r\n      let sorted = false;\r\n      let left = 0;\r\n      let right = indexes.length - 1; \r\n      while(sorted === false) {\r\n        sorted = true;\r\n        for(let i = left; i < right; i++) {\r\n          setTimeout((index1, index2) => {\r\n            this.changeColor(index1, `rgb(255, 57, 57)`);\r\n            this.changeColor(index2, `rgb(255, 57, 57)`);\r\n            this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 2});\r\n          }, 40*this.state.speed*timeOut, i, i+1);\r\n          timeOut++;\r\n          if(temp[i] > temp[i+1]) {\r\n            setTimeout((index1, index2) => {\r\n              this.swap(index1, index2);\r\n              this.setState({moves: this.state.moves + 2});\r\n            }, 40*this.state.speed*timeOut, i, i+1);\r\n            timeOut++;\r\n            let t = temp[i];\r\n            temp[i] = temp[i+1];\r\n            temp[i+1] = t;\r\n            sorted = false;\r\n          } else {\r\n            timeOut++;\r\n          }\r\n          setTimeout((index1, index2) => {\r\n            this.changeColor(index1, `rgb(93, 182, 255)`);\r\n            this.changeColor(index2, `rgb(93, 182, 255)`);\r\n            this.setState({});\r\n          }, 40*this.state.speed*timeOut, i, i+1);\r\n          timeOut++;\r\n        }\r\n        right--;\r\n        if(sorted === true)\r\n          break;\r\n        sorted = true;\r\n        for(let i = right; i > left; i--) {\r\n          setTimeout((index1, index2) => {\r\n            this.changeColor(index1, `rgb(255, 57, 57)`);\r\n            this.changeColor(index2, `rgb(255, 57, 57)`);\r\n            this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 2});\r\n          }, 40*this.state.speed*timeOut, i, i-1);\r\n          timeOut++;\r\n          if(temp[i] < temp[i-1]) {\r\n            setTimeout((index1, index2) => {\r\n              this.swap(index1, index2);\r\n              this.setState({moves: this.state.moves + 2});\r\n            }, 40*this.state.speed*timeOut, i, i-1);\r\n            timeOut++;\r\n            let t = temp[i];\r\n            temp[i] = temp[i-1];\r\n            temp[i-1] = t;\r\n            sorted = false;\r\n          } else {\r\n            timeOut++;\r\n          }\r\n          setTimeout((index1, index2) => {\r\n            this.changeColor(index1, `rgb(93, 182, 255)`);\r\n            this.changeColor(index2, `rgb(93, 182, 255)`);\r\n            this.setState({});\r\n          }, 40*this.state.speed*timeOut, i, i-1);\r\n          timeOut++;\r\n        }\r\n        left++;\r\n      }\r\n    }\r\n\r\n    combSort = () => {\r\n      let timeOut = 0;\r\n      let temp = this.copyArrayValues();\r\n      let gap = indexes.length;\r\n      let sorted = false;\r\n      while(sorted === false) {\r\n        gap = Math.floor(gap/1.3);\r\n        if(gap <= 1) {\r\n          gap = 1;\r\n          sorted = true;\r\n        }\r\n        let i = 0;\r\n        while(i+gap < indexes.length) {\r\n          setTimeout((index1, index2) => {\r\n            this.changeColor(index1, `rgb(255, 57, 57)`);\r\n            this.changeColor(index2, `rgb(255, 57, 57)`);\r\n            this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 2});\r\n          }, 40*this.state.speed*timeOut, i, i+gap);\r\n          timeOut++;\r\n          if(temp[i] > temp[i+gap]) {\r\n            setTimeout((index1, index2) => {\r\n              this.swap(index1, index2);\r\n              this.setState({moves: this.state.moves + 2});\r\n            }, 40*this.state.speed*timeOut, i, i+gap);\r\n            timeOut++;\r\n            let t = temp[i];\r\n            temp[i] = temp[i+gap];\r\n            temp[i+gap] = t;\r\n            sorted = false;\r\n          } else {\r\n            timeOut++;\r\n          }\r\n          setTimeout((index1, index2) => {\r\n            this.changeColor(index1, `rgb(93, 182, 255)`);\r\n            this.changeColor(index2, `rgb(93, 182, 255)`);\r\n            this.setState({});\r\n          }, 40*this.state.speed*timeOut, i, i+gap);\r\n          timeOut++;\r\n          i++;\r\n        }\r\n      }\r\n      this.sorted(40*timeOut*this.state.speed+120);\r\n    }\r\n\r\n    selectionSort = () => {\r\n      let timeOut = 0;\r\n      for(let i = 0; i < indexes.length-1; i++) {\r\n        let minIndex = i;\r\n        for(let j = i+1; j <= indexes.length; j++) {\r\n          if(j === indexes.length) {\r\n            // eslint-disable-next-line no-loop-func\r\n            setTimeout(() => {\r\n              setTimeout(() => {\r\n                this.swap(minIndex, i);\r\n                this.setState({moves: this.state.moves + 2});\r\n              }, 60*this.state.speed);\r\n              setTimeout(() => {\r\n                this.changeColor(i, `rgb(93, 182, 255)`);\r\n                this.setState({});\r\n              }, 120*this.state.speed);\r\n              \r\n            },120*timeOut*this.state.speed)\r\n          } else {\r\n            // eslint-disable-next-line no-loop-func\r\n            setTimeout(() => {\r\n              setTimeout(() => {\r\n                this.changeColor(minIndex, `rgb(106, 211, 65)`); //green\r\n                this.changeColor(j, `rgb(255, 57, 57)`); //red\r\n                this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 2});\r\n              }, 60*this.state.speed)\r\n              setTimeout(() => {\r\n                if(parseFloat(indexes[minIndex].props.data.value) > parseFloat(indexes[j].props.data.value)) { \r\n                  this.changeColor(minIndex, `rgb(93, 182, 255)`) //blue\r\n                  minIndex = j;\r\n                  this.changeColor(minIndex, `rgb(106, 211, 65)`); //green\r\n                } else {\r\n                  this.changeColor(j, `rgb(93, 182, 255)`) //blue\r\n                }\r\n                this.setState({});\r\n              }, 120*this.state.speed)\r\n            },120*timeOut*this.state.speed);\r\n          }\r\n          timeOut++;\r\n        }\r\n      }\r\n      this.sorted(120*timeOut*this.state.speed+120);\r\n    }\r\n\r\n    insertionSort = () => {\r\n      let arrayOfValues = [];\r\n      for(let i = 0; i < indexes.length; i++) {\r\n        arrayOfValues.push(parseFloat(indexes[i].props.data.value));\r\n      }\r\n      let correctPos = [];\r\n      for(let i = 1; i < indexes.length; i++) {\r\n        correctPos.unshift(i);\r\n        for(let j = i; j > 0; j--) {\r\n          if(arrayOfValues[j] < arrayOfValues[j-1]) {\r\n            let temp = arrayOfValues[j];\r\n            arrayOfValues[j] = arrayOfValues[j-1];\r\n            arrayOfValues[j-1] = temp\r\n            correctPos.shift();\r\n            correctPos.unshift(j-1)\r\n          }\r\n        }\r\n      }\r\n      let timeOut = 0;\r\n      for(let i = 1; i < indexes.length; i++) {\r\n        let placement = correctPos.pop();\r\n        for(let j = i; j >= placement; j--) {\r\n          if(j === 0) break;\r\n          // eslint-disable-next-line no-loop-func\r\n          setTimeout(() => {\r\n            setTimeout(() => {\r\n              this.changeColor(j, `rgb(255, 57, 57)`);\r\n              this.changeColor(j-1, `rgb(255, 57, 57)`);\r\n              this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 2});\r\n            }, 40*this.state.speed)\r\n            setTimeout(() => {\r\n                if(parseFloat(indexes[j].props.data.value) < parseFloat(indexes[j-1].props.data.value)) {\r\n                  this.swap(j, j-1);\r\n                  this.setState({moves: this.state.moves + 2});\r\n                }\r\n            }, 80*this.state.speed)\r\n            setTimeout(() => {\r\n              this.changeColor(j, `rgb(93, 182, 255)`);\r\n              this.changeColor(j-1, `rgb(93, 182, 255)`);\r\n              this.setState({});\r\n            }, 120*this.state.speed)\r\n          }, 120*timeOut*this.state.speed);\r\n          timeOut++;\r\n        }\r\n      }\r\n      this.sorted(120*timeOut*this.state.speed+120);\r\n    }\r\n\r\n    shellSort = () => {\r\n      let arrayOfValues = [];\r\n      for(let i = 0; i < indexes.length; i++) {\r\n        arrayOfValues.push(parseFloat(indexes[i].props.data.value));\r\n      }\r\n      let correctPos = [];\r\n      for(let gap = Math.floor(indexes.length/2); gap > 0; gap = Math.floor(gap/2)) {\r\n        // console.log(gap);\r\n        for(let i = gap; i < indexes.length; i++) {\r\n          correctPos.unshift(i);\r\n          for(let j = i; j >= gap; j-=gap) {\r\n            if(arrayOfValues[j] < arrayOfValues[j-gap]) {\r\n              let temp = arrayOfValues[j];\r\n              arrayOfValues[j] = arrayOfValues[j-gap];\r\n              arrayOfValues[j-gap] = temp\r\n              correctPos.shift();\r\n              correctPos.unshift(j-gap)\r\n              console.log(correctPos);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      let timeOut = 0;\r\n      for(let gap = Math.floor(indexes.length/2); gap > 0; gap = Math.floor(gap/2)) {\r\n        for(let i = gap; i < indexes.length; i++) {\r\n          let placement = correctPos.pop();\r\n          for(let j = i; j >= placement; j-=gap) {\r\n            if(j < gap) break;\r\n            // eslint-disable-next-line no-loop-func\r\n            setTimeout(() => {\r\n              setTimeout(() => {\r\n                this.changeColor(j, `rgb(255, 57, 57)`);\r\n                this.changeColor(j-gap, `rgb(255, 57, 57)`);\r\n                this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 2});\r\n              }, 40*this.state.speed)\r\n              setTimeout(() => {\r\n                  if(parseFloat(indexes[j].props.data.value) < parseFloat(indexes[j-gap].props.data.value)) {\r\n                    this.swap(j, j-gap);\r\n                    this.setState({moves: this.state.moves + 2});\r\n                  }\r\n              }, 80*this.state.speed)\r\n              setTimeout(() => {\r\n                this.changeColor(j, `rgb(93, 182, 255)`);\r\n                this.changeColor(j-gap, `rgb(93, 182, 255)`);\r\n                this.setState({});\r\n              }, 120*this.state.speed)\r\n            }, 120*timeOut*this.state.speed);\r\n            timeOut++;\r\n          }\r\n        }\r\n      }\r\n      this.sorted(120*timeOut*this.state.speed+120);\r\n    }\r\n\r\n    mergeSort = () => {\r\n      let timeOut = 0;\r\n      let temp = this.copyArrayValues();\r\n      let aux = [];\r\n      for(let size = 1; size < indexes.length; size*=2) {\r\n        for(let left = 0; left < indexes.length; left += 2*size) {\r\n          let i = left;\r\n          let j = Math.min(left + size, indexes.length);\r\n          let leftBound = j;\r\n          let rightBound = Math.min(j + size, indexes.length); //\r\n          while(i < leftBound && j < rightBound) {\r\n            setTimeout((index1, index2) => {\r\n              console.log(index2)\r\n              this.changeColor(index1, `rgb(255, 57, 57)`);\r\n              this.changeColor(index2, `rgb(255, 57, 57)`);\r\n              this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 1});\r\n            }, 40*this.state.speed*timeOut, i, j);\r\n            timeOut++;\r\n            if(temp[i] <= temp[j]) {\r\n              setTimeout((index) => {\r\n                this.changeColor(index, `rgb(231, 37, 222)`);\r\n                this.setState({accesses: this.state.accesses + 1, moves: this.state.moves + 1});\r\n              }, 40*this.state.speed*timeOut, i);\r\n              timeOut++;\r\n              setTimeout((index1, index2) => {\r\n                this.changeColor(index1, `rgb(93, 182, 255)`);\r\n                this.changeColor(index2, `rgb(93, 182, 255)`);\r\n                this.setState({});\r\n              }, 40*this.state.speed*timeOut, i, j)\r\n              timeOut++;\r\n              aux.push(temp[i++]);\r\n            } else {\r\n              setTimeout((index) => {\r\n                this.changeColor(index, `rgb(231, 37, 222)`);\r\n                this.setState({accesses: this.state.accesses + 1, moves: this.state.moves + 1});\r\n              }, 40*this.state.speed*timeOut, j);\r\n              timeOut++;\r\n              setTimeout((index1, index2) => {\r\n                this.changeColor(index1, `rgb(93, 182, 255)`);\r\n                this.changeColor(index2, `rgb(93, 182, 255)`);\r\n                this.setState({});\r\n              }, 40*this.state.speed*timeOut, i, j)\r\n              timeOut++;\r\n              aux.push(temp[j++]);\r\n            }\r\n          }\r\n          while(i < leftBound) {\r\n            setTimeout((index) => {\r\n              this.changeColor(index, `rgb(255, 57, 57)`);\r\n              this.setState({accesses: this.state.accesses + 2});\r\n            }, 40*this.state.speed*timeOut, i);\r\n            timeOut++;\r\n            setTimeout((index) => {\r\n              this.changeColor(index, `rgb(231, 37, 222)`);\r\n              this.setState({accesses: this.state.accesses + 1, moves: this.state.moves + 1});\r\n            }, 40*this.state.speed*timeOut, i);\r\n            timeOut++;\r\n            setTimeout((index) => {\r\n              this.changeColor(index, `rgb(93, 182, 255)`);\r\n              this.setState({});\r\n            }, 40*this.state.speed*timeOut, i)\r\n            timeOut++;\r\n            aux.push(temp[i++]);\r\n          }\r\n          while(j < rightBound) {\r\n            setTimeout((index) => {\r\n              this.changeColor(index, `rgb(255, 57, 57)`);\r\n              this.setState({accesses: this.state.accesses + 2});\r\n            }, 40*this.state.speed*timeOut, j);\r\n            timeOut++;\r\n            setTimeout((index) => {\r\n              this.changeColor(index, `rgb(231, 37, 222)`);\r\n              this.setState({accesses: this.state.accesses + 1, moves: this.state.moves + 1});\r\n            }, 40*this.state.speed*timeOut, j);\r\n            timeOut++;\r\n            setTimeout((index) => {\r\n              this.changeColor(index, `rgb(93, 182, 255)`);\r\n              this.setState({});\r\n            }, 40*this.state.speed*timeOut, j)\r\n            timeOut++;\r\n            aux.push(temp[j++]);\r\n          }\r\n          for(let k = left; k < rightBound; k++) {\r\n            temp[k] = aux.shift();\r\n            setTimeout((index, newHeight) => {\r\n              this.changeColor(k, `rgb(231, 37, 222)`);\r\n              this.changeHeight(index, newHeight);\r\n              this.setState({accesses: this.state.accesses + 2})\r\n            }, 40*this.state.speed*timeOut, k, temp[k])\r\n            timeOut++;\r\n          }\r\n          for(let k = left; k < rightBound; k++) {\r\n            setTimeout((index) => {\r\n              this.changeColor(k, `rgb(93, 182, 255)`);\r\n              this.setState({});\r\n            }, 40*this.state.speed*timeOut, k)\r\n          }\r\n        }\r\n      }\r\n      this.sorted(40*timeOut*this.state.speed+120);\r\n    }\r\n\r\n    quickSort = () => {\r\n      let timeOut = 0;\r\n      let temp = this.copyArrayValues();\r\n      let stack = [];\r\n      let top = -1;\r\n      stack[++top] = 0;\r\n      stack[++top] = indexes.length-1;\r\n  \r\n\r\n      while(top >= 0) {\r\n        let h = stack[top--];\r\n        let l = stack[top--];\r\n        let randomIndex = Math.floor(Math.random() * (Math.floor(h) - Math.ceil(l) + 1)) + Math.ceil(l)\r\n        let pivot = temp[randomIndex];\r\n        setTimeout((index) => {\r\n          this.changeColor(index, `rgb(255, 216, 89)`);\r\n          this.setState({})\r\n        }, 40*this.state.speed*timeOut, randomIndex);\r\n        timeOut++;\r\n        setTimeout((index1, index2) => {\r\n          this.swap(index1, index2);\r\n          this.setState({accesses: this.state.accesses + 2, moves: this.state.moves + 2})\r\n        }, 40*this.state.speed*timeOut, randomIndex, h);\r\n        timeOut++;\r\n        let x = temp[randomIndex];\r\n        temp[randomIndex] = temp[h];\r\n        temp[h] = x;\r\n        let i = l-1;\r\n        setTimeout((index) => {\r\n          this.changeColor(index, `rgb(106, 211, 65)`);\r\n          this.setState({accesses: this.state.accesses + 3, comparisons: this.state.comparisons + 1, moves: this.state.moves + 2});\r\n        }, 40*this.state.speed*timeOut, i+1);\r\n        timeOut++;\r\n        for(let j = l; j <= h-1; j++) {\r\n          setTimeout((index) => {\r\n            this.changeColor(index, `rgb(255, 127, 77)`);\r\n            this.setState({accesses: this.state.accesses + 1});\r\n          }, 40*this.state.speed*timeOut, j) \r\n          timeOut++;\r\n          if(temp[j] <= pivot) {\r\n            i++;\r\n            setTimeout((index1, index2) => {\r\n              this.changeColor(index1, `rgb(255, 57, 57)`);\r\n              this.changeColor(index2, `rgb(255, 57, 57)`);\r\n              this.setState({});\r\n            }, 40*this.state.speed*timeOut, i, j);\r\n            timeOut++;\r\n            setTimeout((index1, index2) => {\r\n              this.swap(index1, index2);\r\n              this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 1, moves: this.state.moves + 2});\r\n            }, 40*this.state.speed*timeOut, i, j);\r\n            timeOut++;\r\n            setTimeout((index1, index2) => {\r\n              this.changeColor(index1+1, `rgb(106, 211, 65)`);\r\n              this.changeColor(index1, `rgb(93, 182, 255)`);\r\n              this.changeColor(index2, `rgb(93, 182, 255)`);\r\n              this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 1, moves: this.state.moves + 2});\r\n            }, 40*this.state.speed*timeOut, i, j);\r\n            timeOut++;\r\n            let t = temp[i];\r\n            temp[i] = temp[j];\r\n            temp[j] = t;\r\n          } else {\r\n            setTimeout((index) => {\r\n              this.changeColor(index, `rgb(106, 211, 65)`);\r\n              this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 1});\r\n            }, 40*this.state.speed*timeOut, i+1);\r\n            timeOut++;\r\n          }\r\n          setTimeout((index) => {\r\n            this.changeColor(index, `rgb(93, 182, 255)`);\r\n            this.setState({});\r\n          }, 40*this.state.speed*timeOut, j) \r\n          timeOut++;\r\n        }\r\n        setTimeout((index1, index2) => {\r\n          this.swap(index1, index2);\r\n          this.setState({accesses: this.state.accesses + 2, moves: this.state.moves + 2})\r\n        }, 40*this.state.speed*timeOut, i+1, h)\r\n        timeOut++;\r\n        setTimeout((index1, index2) => {\r\n          this.changeColor(i+1, `rgb(93, 182, 255)`);\r\n          this.changeColor(h, `rgb(93, 182, 255)`);\r\n        }, 40*this.state.speed*timeOut, i+1, h);\r\n        setTimeout((index) => {\r\n          this.changeColor(index, `rgb(93, 182, 255)`);\r\n          this.setState({})\r\n        }, 40*this.state.speed*timeOut, randomIndex);\r\n        timeOut++;\r\n        let t = temp[i+1];\r\n        temp[i+1] = temp[h];\r\n        temp[h] = t;\r\n        let p = i+1;\r\n        if(p+1 < h) {\r\n          stack[++top] = p + 1;\r\n          stack[++top] = h;\r\n        }\r\n        if(p-1 > l) {\r\n          stack[++top] = l;\r\n          stack[++top] = p - 1;\r\n        }\r\n      }\r\n      this.sorted(40*timeOut*this.state.speed+120);\r\n    }\r\n\r\n    heapSort = () => {\r\n      let timeOut = 0;\r\n      let temp = this.copyArrayValues();\r\n      for(let i = Math.floor(indexes.length/2); i >= 0; i--) {\r\n        if(temp[2*i+2] == null && temp[2*i+1] == null) continue;\r\n        let maxChild = temp[2*i+1] > temp[2*i+2] || temp[2*i+2] == null ? 1 : 2;\r\n        setTimeout(() => {\r\n          this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 1});\r\n        }, 40*this.state.speed*timeOut);\r\n        timeOut++;\r\n        if(temp[i] < temp[2*i+maxChild]) {\r\n          let j = i;\r\n          while(temp[j] < temp[2*j+maxChild]) {\r\n            setTimeout((index1, index2) => {\r\n              this.changeColor(index1, `rgb(255, 57, 57)`);\r\n              this.changeColor(index2, `rgb(255, 57, 57)`);\r\n              this.setState({})\r\n            }, 40*this.state.speed*timeOut, j, 2*j+maxChild);\r\n            timeOut++;\r\n            setTimeout((index1, index2) => {\r\n              this.swap(index1, index2);\r\n              this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 1, moves: this.state.moves + 2})\r\n            }, 40*this.state.speed*timeOut, j, 2*j+maxChild);\r\n            timeOut++;\r\n            setTimeout((index1, index2) => {\r\n              this.changeColor(index1, `rgb(93, 182, 255)`);\r\n              this.changeColor(index2, `rgb(93, 182, 255)`);\r\n              this.setState({})\r\n            }, 40*this.state.speed*timeOut, j, 2*j+maxChild);\r\n            timeOut++;\r\n            let t = temp[j];\r\n            temp[j] = temp[2*j+maxChild];\r\n            temp[2*j+maxChild] = t;\r\n            j = 2*j+maxChild\r\n            maxChild = temp[2*j+1] > temp[2*j+2] || temp[2*j+2] == null ? 1 : 2;\r\n          }\r\n        }\r\n      }\r\n      for (let i = indexes.length - 1; i > 0; i--) {\r\n        setTimeout((index1, index2) => {\r\n          this.changeColor(index1, `rgb(255, 57, 57)`);\r\n          this.changeColor(index2, `rgb(255, 57, 57)`);\r\n          this.setState({})\r\n        }, 40*this.state.speed*timeOut, 0, i);\r\n        timeOut++;\r\n        setTimeout((index1, index2) => {\r\n          this.swap(index1, index2);\r\n          this.setState({accesses: this.state.accesses + 2, moves: this.state.moves + 2})\r\n        }, 40*this.state.speed*timeOut, 0, i);\r\n        timeOut++;\r\n        setTimeout((index1, index2) => {\r\n          this.changeColor(index1, `rgb(93, 182, 255)`);\r\n          this.changeColor(index2, `rgb(93, 182, 255)`);\r\n          this.setState({})\r\n        }, 40*this.state.speed*timeOut, 0, i);\r\n        timeOut++;\r\n        let t = temp[i];\r\n        temp[i] = temp[0];\r\n        temp[0] = t;\r\n        let j = 0;\r\n        if(temp[1] == null || temp[2] == null) break;\r\n        let maxChild = temp[1] > temp[2] || i === 2 ? 1 : 2;\r\n        while(temp[j] < temp[2*j+maxChild] && 2*j+maxChild < i) {\r\n          setTimeout((index1, index2) => {\r\n            this.changeColor(index1, `rgb(255, 57, 57)`);\r\n            this.changeColor(index2, `rgb(255, 57, 57)`);\r\n            this.setState({})\r\n          }, 40*this.state.speed*timeOut, j, 2*j+maxChild);\r\n          timeOut++;\r\n          setTimeout((index1, index2) => {\r\n            this.swap(index1, index2);\r\n            this.setState({accesses: this.state.accesses + 2, comparisons: this.state.comparisons + 1, moves: this.state.moves + 2})\r\n          }, 40*this.state.speed*timeOut, j, 2*j+maxChild);\r\n          timeOut++;\r\n          setTimeout((index1, index2) => {\r\n            this.changeColor(index1, `rgb(93, 182, 255)`);\r\n            this.changeColor(index2, `rgb(93, 182, 255)`);\r\n            this.setState({})\r\n          }, 40*this.state.speed*timeOut, j, 2*j+maxChild);\r\n          timeOut++;\r\n          let t = temp[j];\r\n          temp[j] = temp[2*j+maxChild];\r\n          temp[2*j+maxChild] = t;\r\n          j = 2*j+maxChild\r\n          maxChild = temp[2*j+1] > temp[2*j+2] || temp[2*j+2] == null? 1 : 2;\r\n        }\r\n      }\r\n      this.sorted(40*timeOut*this.state.speed+120);\r\n    }\r\n\r\n    handleModals = (isOpen, button) => {\r\n      if(isOpen) {\r\n        if(button === \"About\") {\r\n          this.setState({about: \"block\"});\r\n        } if(button === \"Help\") {\r\n          this.setState({help: \"block\"});\r\n        } if(button === \"Info\") {\r\n          this.setState({info: \"block\"});\r\n        }\r\n      } else {\r\n        if(button === \"About\") {\r\n          this.setState({about: \"none\"});\r\n        } if(button === \"Help\") {\r\n          this.setState({help: \"none\"});\r\n        } if(button === \"Info\") {\r\n          this.setState({info: \"none\"});\r\n        }\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return(\r\n        <div className = 'Sorter'>\r\n            <Sidebar \r\n                sizeChange = {this.sizeChange} \r\n                ascend = {this.ascend}\r\n                descend = {this.descend}\r\n                shuffle = {this.shuffle} \r\n                randomize = {this.randomize}\r\n                speedChange = {this.speedChange}\r\n                sortChange = {this.sortChange}\r\n                distributionChange = {this.distributionChange}\r\n                sort = {this.sort}\r\n                handleModals = {this.handleModals}\r\n                accesses = {this.state.accesses}\r\n                comparisons = {this.state.comparisons}\r\n                moves = {this.state.moves}\r\n            ></Sidebar>\r\n            <div className = \"Array\">\r\n                {indexes}\r\n            </div>\r\n            <Modal display = {this.state.about} header = \"About\" paragraph = {aboutParagraph} handleModals = {this.handleModals}></Modal>\r\n            <Modal display = {this.state.help} header = \"Help\" paragraph = {helpParagraph} handleModals = {this.handleModals}></Modal>\r\n            <Modal display = {this.state.info} header = \"Info\" paragraph = {infoParagraph} handleModals = {this.handleModals}></Modal>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\nlet aboutParagraph = `This is a project developed by Samuel Ko as a tool for practicing the React framework. \r\nIt showcases the use of React components and JSX syntax to design a webpage.\r\nThe project is designed with the idea of being an interactive learning tool for understanding the concept of sorting, \r\nwhich is a key concept in the study of data structures and algorithms. \r\nThe selection of algorithms ranges from introductory and novel algorithms such as Bubble Sort and Selection Sort, \r\nto more applicable and complicated algorithms like Merge Sort and Quick Sort.\r\nIt is coupled with a UI designed to allow the user to control the characterisitics of the visualization \r\nand the initial state of the array. To aid in understanding, real-time statisitics \r\nare tracked as the algorithm runs to provide data on the internal efficiency of different algorithms`;\r\nlet helpParagraph = \r\n  <p>\r\n    To use the program, make a selection of settings using the sidebar on the left, click <em>Shuffle</em> to unsort the array, and click <em>Sort</em> to being the visualization.<br></br>\r\n    Click <em>Randomize</em> to select a random size and direction for the sort. <br></br><br></br>\r\n\r\n    <b><em>Algorithm</em></b> <br></br>\r\n    Select the desired algorithmic process to visualize.<br></br>\r\n\r\n    <b><em>Direction</em></b> <br></br>\r\n    Select the direction that dictates which elements are greater, either ascending (short to tall) or descending (tall to short).<br></br>\r\n\r\n    <b><em>Speed</em></b> <br></br>\r\n    Select the speed of the visualization up to 10x slower or faster.<br></br>\r\n\r\n    <b><em>Size</em> </b> <br></br>\r\n    Select the size of the array to be sorted (larger arrays may cause lag on slower machines as a real algorithm is ran in the background).<br></br>\r\n\r\n    <b><em>Distribution</em></b> <br></br>\r\n    Select the initial distribution of elements of the array upon shuffling.<br></br>\r\n\r\n    <b><em>Acesses</em></b> <br></br>\r\n    Number of times an element in an array is used or called.<br></br>\r\n\r\n    <b><em>Comparisons</em></b> <br></br>\r\n    Number of times two elements are compared for inequality.<br></br>\r\n\r\n    <b><em>Moves</em></b> <br></br>\r\n    Number of times an element needs to be shifted or copied to a different location.<br></br>\r\n  </p>\r\nlet infoParagraph = \r\n  <p>\r\n    <b><em>Bubble Sort</em></b> <br></br>\r\n    Starting from the left, each index is compared with the immediate element to the right and swapped if the pair is out of order, bringing the i-th greatest element to the sorted position <br></br>\r\n\r\n    <b><em>Cocktail Sort</em></b> <br></br>\r\n    Also called Bidirectional Bubble Sort since it is essentially Bubble Sort alternating directions. Starting from the left, each index is compared \r\n    with the immediate element to the right and swapped if out of order. Then starting from the right, each index is compared with the immediate element \r\n    to the left. This pattern alternates until there are no swaps performed in one iteration. <br></br>\r\n\r\n    <b><em>Comb Sort</em></b> <br></br>\r\n    An optimized version of Bubble Sort that includes comparisons that are not immediately adjacent. Comparisons are made across a specified gap, and \r\n    the gap decreases oer iteration until it reaches 0, in which case regular Bubble Sort will be performed until the no swaps are made in one iteration. \r\n    The gapped iterations help to quickly form a nearly sorted array such that the non-gapped iterations will become more optimized.<br></br>\r\n\r\n    <b><em>Selection Sort</em></b> <br></br>\r\n    Starting from the left, a linear search will be conducted to find the i-th largest element, by keeping track of a current maximum until no more elements \r\n    are shown to be greater. At the end of each iteration the maximum element will be placed in the i-th to last position such that the right part of the array\r\n    will become increasingly sorted per iteration. <br></br>\r\n\r\n    <b><em>Insertion Sort</em></b> <br></br>\r\n    Starting from the left, each index will compare with elements to the left, if an element is found to be less than the current index than the current index\r\n    will move the position immediately to the right of that element. Since the index is being inserted, all elements to the right of that position myst move to the right. \r\n    The array will be split into a tentatively sorted half and a non-sorted half until the entire array has been iterated over. <br></br>\r\n\r\n    <b><em>Shell Sort</em></b> <br></br>\r\n    An optimized version of Insertion Sort that proves to be useful for relatively small data sets under a couple thousand items. Similar to Insertion Sort\r\n    elements will be compared with elements to left, but comparisons will start with being compared across a gap instead of adjacent items. The gapped iterations will \r\n    run over the entire array, and the gap will shrink per iteration. This continues until the gap is 0 returning to normal Insertion Sort. The initial gapped \r\n    iterations quickly form a nearly sorted array on which Insertion Sort will be optimized. <br></br>\r\n\r\n    <b><em>Merge Sort</em></b> <br></br>\r\n    Utilizes the concept of a merge function that is able to combine two sorted arrays into one sorted array by comparing the elements between the two arrays. The \r\n    smallest element will be selected and stored in an auxilary array until all elements are inserted. This is first applied between sub-arrays of size one which involves\r\n    a single comparison forming sorted arrays of size two. These sub-arrays of size two are then merged to form sub-arrays of size four. The merged arrays must be \r\n    re-inserted into the main array after every merge. This pattern continues until the the main array is finally merged into a single array. The variant shown\r\n    here is known as iterative bottum-up Merge Sort which sorts all smallest possible sub-arrays before merging them all. The commonly taught recursive top-down\r\n    Merge Sort applies the same concept except it biases towards merging the largest possible sub-array from the left.<br></br>\r\n\r\n    <b><em>Quick Sort</em></b> <br></br>\r\n    Known as the generally fastest algorithm for large randomly sorted arrays, it utilizes the concept of a partition function that places a single element defined as the pivot\r\n    into its absolute correct position by placing all lesser elements to the left and all greater elements to the right. The partition function shown here is known \r\n    as Lomuto partitioning which involves moving a randomly selected element to the end of the current sub-array, then keeping track of a tentative final pivot \r\n    position, while the algorithm searches for an element less than the pivot. If one is found the lesser element is swapped with the current pivot position and the \r\n    position moves one to the right. When all elements up to the bounds have been searched the pivot element is swapped into the pivot position. Since only a single element \r\n    will be sorted while the two halves remain unsorted, this partition process can be repeated for both halves until sub-arrays of size two or one are reached in which case\r\n    all elements will be in their final position. The bounds of the halves of the sub-arrays must be stored in a stack either through recursion or an array stack.<br></br>\r\n\r\n    <b><em>Heap Sort</em></b> <br></br>\r\n    Known as the generally most space efficient algorithm while maintaining optimal time complexity, it utlizes the concept of heaps which is based on the concept of a tree where \r\n    all child nodes are greater than their parents or all child nodes are lesser than their parents. Heap Sort uses the latter version forming a max heap with \r\n    the greatest element on top. The heap can be formed throught iterations of sift-up or sift-down. The variation shown here is sift-down since it is proven to be more efficient.\r\n    This tree structure can be represented sequentially in arrays by placing the two children of all i-th nodes into the 2i + 1 and 2i + 2 indexes.\r\n    Since the greatest element will therefore be on the left, we can swap this with the smallest element on the right placing the greatest element in its correct position. The heap \r\n    will then need to be corrected after every iteration moving the smallest element back down and the next greatest element to the leftmost position. This is repeated, placing\r\n    the i-th greatest element in the i-th to last position until the heap is empty and all element are in the correct position.\r\n  </p>\r\n  \r\n\r\nexport default Sorter;","import React, {Component} from 'react';\nimport './App.css';\nimport Sorter from './Sorter/Sorter';\n\nclass App extends Component {\n  render() {\n    return(\n      <div>\n        <Sorter></Sorter>\n      </div>\n    );\n  }\n}\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Hello\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}